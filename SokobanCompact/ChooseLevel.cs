/*
 * This file is a part of SokobanCompact
 * 
 * Copyright © 2008-2013 OverQuantum
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Author contacts:
 * http://overquantum.livejournal.com
 * https://github.com/OverQuantum
 * 
 * Project homepage:
 * https://github.com/OverQuantum/SokobanCompact
 * 
 */

using System;
using System.Windows.Forms;

namespace SokobanCompact
{
    /// <summary>Form for selecting level from levelset</summary>
    public partial class ChooseLevel : Form
    {

        /// <summary>Information about level - for using as element of listbox</summary>
        private class LevelInfo
        {
            /// <summary>Level description</summary>
            private readonly string sText;

            /// <summary>Level index in levelset</summary>
            public readonly int iIndex;

            /// <summary>Constructor (description, index)</summary>
            public LevelInfo(string sNewText, int iNewIndex)
            {
                sText = sNewText;//Copy data
                iIndex = iNewIndex;
            }

            /// <summary>Will return description - for displaying in listbox</summary>
            override public string ToString()
            {
                return sText;
            }
        }

        /// <summary>Index of selected level</summary>
        public int iSelectedLevel;

        /// <summary>Copy of game setting, for displaying solving levels or not</summary>
        public bool bShowOnlyUnsolvedLevels;

        /// <summary>Handle of levelset object</summary>
        private SokobanLevelSet uAssignedLevelSet;

        /// <summary>Flag, set off during relisting levels, to distinguish SelectedIndexChanged between generated by Enlist and by user click</summary>
        private bool bReady;

        /// <summary>Void constructor</summary>
        public ChooseLevel()
        {
            InitializeComponent();
        }

        /// <summary>Activate form for selecting level (levelsets object)</summary>
        public DialogResult SelectLevel(SokobanLevelSet uLevelSet)
        {
            uAssignedLevelSet = uLevelSet;//Store levelset object handle

            iSelectedLevel = uAssignedLevelSet.GetCurrentLevel();//Get current level to highlight it in list
            menuShowUnsolved.Checked = !bShowOnlyUnsolvedLevels;//Set checking-flag for menu

            Enlist();//List levels in listbox

            DialogResult = DialogResult.Cancel;//Default result of choosing

            DialogResult bRv = ShowDialog();//Activate choosing in modal mode

            Dispose();//Release resources of dialog

            return bRv;
        }

        /// <summary>Get index of selected level from listbox</summary>
        private void GetSelected()
        {
            iSelectedLevel = listLevels.SelectedIndex;//Get index of selected item in listbox
            if (iSelectedLevel < 0 || iSelectedLevel >= listLevels.Items.Count)
            {   //Outside of listbox range
                iSelectedLevel = -1;//No level is selected
                return;
            }
            iSelectedLevel = ((LevelInfo)(listLevels.Items[iSelectedLevel])).iIndex;//Get index of level in leveset - solved levels could be hidden, so listbox item index is not level index
        }

        /// <summary>Selection in listbox changed</summary>
        private void listLevels_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (bReady)
            {   //Only for events, generated as a result of user click on level

                GetSelected();//Get index of selected level
                if (iSelectedLevel >= 0)
                {   //Some level is actually selected - close dialog with success
                    DialogResult = DialogResult.OK;
                    Close();
                }
            }
        }

        /// <summary>Menu Select clicked</summary>
        private void menuSelect_Click(object sender, EventArgs e)
        {   
            GetSelected();
            if (iSelectedLevel >= 0)
            {   //Some level is actually selected - close dialog with success
                DialogResult = DialogResult.OK;
                Close();
            }
        }

        /// <summary>Menu Cancel clicked</summary>
        private void menuCancel_Click(object sender, EventArgs e)
        {
            //Close dialog with cancel
            DialogResult = DialogResult.Cancel;
            Close();
        }

        /// <summary>Fill listbox with list of levels</summary>
        private void Enlist()
        {
            LevelInfo uItem;
            int iLevels = uAssignedLevelSet.GetLevelsNum();//Get number of levels
            string sLevelName;
            bReady = false;//Updating listbox started - set off flag
            listLevels.Items.Clear();//Clean listbox
            for (int i = 0; i < iLevels; i++)//Iterate thru all levels
            {
                if (bShowOnlyUnsolvedLevels && uAssignedLevelSet.IsSolved(i)) continue;//Unsolved levels not displayed, if corrensonding option is set
                sLevelName = (i + 1).ToString() + ") " + uAssignedLevelSet.GetLevelDescription(i);//Main level description - index, title, sizes and number of boxes
                if (uAssignedLevelSet.IsSolved(i))
                    sLevelName = "V " + sLevelName;//Mark "level solved"
                else
                    sLevelName = "   " + sLevelName;//Level not solved (width "   " almost equal with "V ")
                uItem = new LevelInfo(sLevelName, i);//Item, describing level - description and index
                listLevels.Items.Add(uItem);//Add item to list
                if (iSelectedLevel == i)
                    listLevels.SelectedIndex = listLevels.Items.IndexOf(uItem);//Highlight selected level
            }
            bReady = true;//Updating listbox finished, set on flag
        }

        /// <summary>Menu "Show unsolved" clicked</summary>
        private void menuShowUnsolved_Click(object sender, EventArgs e)
        {
            menuShowUnsolved.Checked = !menuShowUnsolved.Checked;//Update menu check status to new state
            bShowOnlyUnsolvedLevels = !menuShowUnsolved.Checked;//Update option with new state
            Enlist();//Relist levels
        }

        /// <summary>Menu "Change LevelSet" clicked</summary>
        private void menuLevelSet_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.Retry;//Result indicating that user want to select levelset instead of level
            Close();
        }
    }
}